editmenu # add your own custom commands to palettero command palette
updatemenu # collect all help and colorscheme runtime files, including plugins
textfilter grep -v ^\s*$ # remove empty lines
textfilter py -x 're.sub("\s+$", "", x)' # remove whitespace at the end of line
textfilter busybox tr '\n' ' ' # join lines, convert newline to space
textfilter sort --unique # remove duplicate lines and sort - similar to 'sort foo.txt|uniq'
textfilter py -x 're.sub("\s+$", "", x)' # remove whitespace at the end of line
textfilter busybox tr ',' '\n' # split comma separated list to multiple lines
textfilter busybox xxd # address, hex dump and ASCII - show hidden characters
textfilter busybox tr '|?=' '\n' # split webmail uglified links that record user clicks, after URL decode
textfilter sort # A-Z, ascending alphabethical order
textfilter sort -r # Z-A, descending alphabethical order
textfilter busybox awk '{print $2 " " $1}' # swap first and second word
textfilter busybox fold -s -w 79 # hard wrap
textfilter busybox nl # number lines
textfilter tr ' ' ',' # space to comma
textfilter tr '\n' ',' # newline to comma, join lines
textfilter py -x x.lower() # lower case, # apt-get install pythonpy
textfilter py -x x.title() # Title Case, # apt-get install pythonpy
goto 99999999 # jump to end of file, bottom of text
goto 1 # jump to start of file, first line of document, start of text
set colorscheme simple # black on white, daytime color theme +sensiblesettings
set ftoptions false # allow indent with tabs in Python, also: set tabstospaces false +sensiblesettings
set tabstospaces false # indent with tab +sensiblesettings
retab # convert indentation to tabs/spaces, as you have chosen with 'set tabstospaces false'
set ruler true # show line numbers
set ruler false # hide line numbers
set softwrap true # wrap lines to fit screen, but don't really insert newlines. Also: set wordwrap true
set wordwrap true # wrap at white space. Also: set softwrap true
set autoclose false # don't automatically add matching brackets (){}[]
textfilter base64 # ASCII armor so that binary can be copy-pasted as text
textfilter base64 --decode # convert ASCII armored text back to binary; base64 often ends with "="
textfilter busybox tr '[a-zA-Z]' '[n-za-mN-ZA-M]'  # rot13, caesar encryption, a simple substitute cipher
textfilter py -x 'urllib.parse.unquote(x)' # URL decode # apt-get install pythonpy
textfilter busybox tr -s ' ' # squeeze space, convert multiple spaces to one
reset colorscheme # reset colorscheme setting to default. See also: 'set colorscheme simple'
plugin list # list installed plugins
plugin available # list plugins that could be installed with 'plugin install jump'
plugin install # install a plugin from the list shown by 'plugin available'
plugin search jump # search plugin names
set # set micro options, such as ruler, softwrap, tabstospaces...
reset # reset a setting to it's default value 'reset colorscheme'
setlocal # set an option just for this buffer (current document), 'setlocal readonly on'
show # show value of an option, 'show colorscheme'
showkey # shows action for a key binding, 'showkey Ctrl-P'
run # run a shell command in the background 'run touch /tmp/palettero-was-here', no output, only exit status
bind # bind a key to action, 'bind Ctrl-J command:palettero'
unbind # should bind key to its default action, but did not work in the tested version
help plugins # plugin developer help, Lua coding and accessing micro Go internals with Lua
quit # quit micro, typically Ctrl-Q
goto # jump to line, first line is 1. 'goto 88'
save # save current buffer (the document you're editing). Often Ctrl-S. 
replace # interactively replace each "foo" with "BAR", ask for each, 'replace foo BAR'. Regexp support. 
replaceall # immediately replace all "foo" with "BAR", 'replaceall foo BAR'. Regexp support. 
vsplit # open new vertical split on right side, optionally open named file. 'vsplit right.md'
hsplit # open a new horizontal split on the bottom, optionally open file. 'hsplit bottom.md'
tab # open a new tab, optionally open a file 'tab tero.md'
help # open help in a new bottom hsplit, optionally at given document 'help plugins'
eval # unsupported - would evaluate a Lua expression, but is not implemented in the version tested
log # toggle log view. Mostly commands given with Ctrl-E command bar, can have other logs.
plugin # install, remove, update (plugins); list (installed), (show) available (but not installed), search
reload # reload all configuration files: syntax, colorschemes...
reopen # Load current buffer (the file you're editing) from disk
cd # change working directory
pwd # print working directory
open # open a new file for editing. Tab completes filenames. 
tabmove # move the current tab to given index, 1 is the first. 
tabswitch # select given tab, 1 is the first
term # open terminal in a new tab
memusage # show how much micro is taking RAM memory
raw # show escape sequences of keys you press, in a new tab
textfilter # run any command to edit selection, 'textfilter tr "a" "B"'
help colors # syntax highlight
help commands # used by palettero and ctrl-e command bar
help copypaste # micro supports multiple clipboards and many ways to copy-paste
help defaultkeys # hotkeys, bindings and keyboard shortcuts, like 'help keybindings'
help help # intro to micro help
help keybindings # hotkeys, bindings and keyboard shortcuts, 'help defaultkeys'
help options # settings of micro, like 'set ftoptions off', 'set tabstospaces false', 'set autoclose false'
help plugins # develop and write your own plugins using Lua (and Go interfaces trough Lua)
help tutorial # configuring micro with settings, keybindings and init.lua
# tmux support: to allow shift-up, ctrl-right in micro, run  'echo "export TERM=tmux-256color">> .bashrc'
